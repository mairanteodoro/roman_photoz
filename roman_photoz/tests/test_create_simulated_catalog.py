import pytest
import numpy as np
from pathlib import Path
from unittest.mock import patch, MagicMock
from roman_photoz.create_simulated_catalog import SimulatedCatalog
from roman_photoz.default_config_file import default_roman_config
from numpy.lib.recfunctions import merge_arrays

FILTER_LIST = (
    default_roman_config.get("FILTER_LIST", "")
    .replace(".pb", "")
    .replace("roman/roman_", "")
    .split(",")
)

@pytest.fixture
def simulated_catalog():
    return SimulatedCatalog()

def test_is_folder_not_empty(simulated_catalog):
    with patch("pathlib.Path.exists", return_value=True), \
         patch("pathlib.Path.is_dir", return_value=True), \
         patch("pathlib.Path.glob", return_value=["file1", "file2"]):
        assert simulated_catalog.is_folder_not_empty("dummy_path", "file") is True

    with patch("pathlib.Path.exists", return_value=False):
        assert simulated_catalog.is_folder_not_empty("dummy_path", "file") is False
    with patch("pathlib.Path.is_dir", return_value=False):
        assert simulated_catalog.is_folder_not_empty("dummy_path", "file") is False
    with patch("pathlib.Path.glob", return_value=[]):
        assert simulated_catalog.is_folder_not_empty("dummy_path", "file") is False

def test_add_ids(simulated_catalog):
    catalog = np.array([(1.0, 2.0), (3.0, 4.0)], dtype=[("col1", "f8"), ("col2", "f8")])
    updated_catalog = simulated_catalog.add_ids(catalog)
    assert "id" in updated_catalog.dtype.names
    assert np.array_equal(updated_catalog["id"], [1, 2])

@pytest.mark.parametrize(
    "params",
    [
        {"mag_noise": 0.1, "mag_err": 0.01},
        {"mag_noise": 0.2, "mag_err": 0.02},
        {"mag_noise": 0.05, "mag_err": 0.005},
    ],
)
def test_add_error(simulated_catalog, params):
    catalog = np.array([(1.0, 2.0)], dtype=[("mag1", "f8"), ("mag2", "f8")])
    updated_catalog = simulated_catalog.add_error(
        catalog, mag_noise=params["mag_noise"], mag_err=params["mag_err"], seed=123
    )
    # ensure that the new columns are added and values are within the expected range
    assert "mag1_err" in updated_catalog.dtype.names
    assert "mag2_err" in updated_catalog.dtype.names
    assert (updated_catalog["mag1_err"][0] > 0) & (updated_catalog["mag1_err"][0] <= params["mag_err"])
    assert (updated_catalog["mag2_err"][0] > 0) & (updated_catalog["mag2_err"][0] <= params["mag_err"])
    # ensure that noise has been added to the original magnitudes
    assert np.all(updated_catalog["mag1"] != catalog["mag1"])
    assert np.all(updated_catalog["mag2"] != catalog["mag2"])

def test_pick_random_lines(simulated_catalog):
    simulated_catalog.simulated_data = np.array(
        [(1.0, 2.0), (3.0, 4.0), (5.0, 6.0)],
        dtype=[("col1", "f8"), ("col2", "f8")]
    )
    random_lines = simulated_catalog.pick_random_lines(2)
    assert len(random_lines) == 2

def test_create_header(simulated_catalog):
    # create a mock header as generated by lephare.prepare()
    mock_file_content = "# model ext_law E(B-V) age N_filt magnitude_vector kcorr_vector"
    with patch("builtins.open", new_callable=MagicMock) as mock_open:
        mock_open.return_value.__enter__.return_value.readline.return_value = mock_file_content
        colnames = simulated_catalog.create_header("dummy_catalog")
    # check that we have expanded the columns with _vector suffix into multiple columns (one for each filter)
    assert all(f"magnitude_{filter}" in colnames for filter in FILTER_LIST)
    assert all(f"kcorr_{filter}" in colnames for filter in FILTER_LIST)
    # check that "#" and "age" have been removed
    assert all(x not in colnames for x in ["#", "age"])

def test_update_roman_catalog_template(simulated_catalog):
    # Create test data for fluxes and catalog
    flux = np.array([(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0)], dtype=[(f"magnitude_{f}", "f8") for f in FILTER_LIST])
    flux_err = np.array([(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0)], dtype=[(f"magnitude_{f}_err", "f8") for f in FILTER_LIST])
    extra = np.array([(1, 2.0, 3.0, 3.0)], dtype=[("id", "i4"), ("context", "f8"), ("zspec", "f8"), ("z_true", "f8")])
    
    # Merge fluxes into the catalog
    catalog = merge_arrays([extra, flux, flux_err], flatten=True)
    simulated_catalog.update_roman_catalog_template(catalog)
    # check that the LePhare-required columns were added to the roman_catalog_template.source_catalog
    assert all(x in simulated_catalog.roman_catalog_template.source_catalog.colnames for x in ["id", "context", "zspec", "string_data"])

def test_process(simulated_catalog):
    with patch.object(simulated_catalog, "get_filters") as mock_get_filters, \
         patch.object(simulated_catalog, "create_simulated_data") as mock_create_simulated_data, \
         patch.object(simulated_catalog, "create_simulated_input_catalog") as mock_create_simulated_input_catalog:
        simulated_catalog.process(output_path="dummy_path", output_filename="dummy_file")
        mock_get_filters.assert_called_once()
        mock_create_simulated_data.assert_called_once()
        mock_create_simulated_input_catalog.assert_called_once()
